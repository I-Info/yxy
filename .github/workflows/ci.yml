name: CI

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  basic:
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-gnu"
          - os: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - os: "macos-latest"
            target: "x86_64-apple-darwin"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: List support target platform
        run: rustup target list

      - uses: Swatinem/rust-cache@v1

      - name: Run tests
        run: cargo test -vr

      - name: Build
        run: cargo build -vr

      - name: List target
        run: ls -l target/release

      - name: Upload build artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ${{ matrix.target }}
          path: |
            target/release/*yxy*

  apple:
    runs-on: "macos-latest"

    strategy:
      matrix:
        target:
          - "aarch64-apple-ios"
          - "aarch64-apple-darwin"
          - "aarch64-apple-ios-sim"
          - "x86_64-apple-ios"

    steps:
      - uses: actions/checkout@v3

      - name: Install target
        run: rustup update && rustup target add ${{ matrix.target }}

      - name: List support target platform
        run: rustup target list

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}

      - name: Build
        run: cargo build -r --target ${{ matrix.target }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/*yxy*

  xcframework:
    needs: [basic, apple]
    runs-on: "macos-latest"

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Create fat library
        run: |
          mkdir universal
          lipo -create x86_64-apple-darwin/libyxy.a aarch64-apple-darwin/libyxy.a -output universal/libyxy_macos.a
          lipo -create x86_64-apple-ios/libyxy.a aarch64-apple-ios-sim/libyxy.a -output universal/libyxy_iossim.a

      - name: Create XCFramework & Bundle
        run: |
          xcodebuild -create-xcframework -library ./universal/libyxy_macos.a -headers ./include -library ./universal/libyxy_iossim.a -headers ./include -library ./aarch64-apple-ios/libyxy.a -headers ./include -output yxy.xcframework
          zip -r bundle.zip yxy.xcframework
          openssl dgst -sha256 bundle.zip > bundle.zip.checksum

      - name: Upload Bundle
        uses: actions/upload-artifact@v3.1.0
        with:
          name: xcframework-universal
          path: |
            bundle.zip
            bundle.zip.checksum

  publish:
    needs: [basic, apple, xcframework]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Display artifacts
        run: ls -R
        working-directory: ./artifacts

      - name: Extract bin files
        run: |
          mkdir dist
          cp artifacts/x86_64-apple-darwin/yxy dist/yxy-${GITHUB_REF##*/}-x86_64-apple-darwin
          cp artifacts/x86_64-apple-darwin/libyxy.dylib dist/
          cp artifacts/x86_64-pc-windows-msvc/yxy.exe dist/yxy-${GITHUB_REF##*/}-x86_64-pc-windows-msvc.exe
          cp artifacts/x86_64-pc-windows-msvc/yxy.dll dist/
          cp artifacts/x86_64-unknown-linux-gnu/yxy dist/yxy-${GITHUB_REF##*/}-x86_64-unknown-linux-gnu
          cp artifacts/x86_64-unknown-linux-gnu/libyxy.so dist/
          cp artifacts/aarch64-apple-darwin/yxy dist/yxy-${GITHUB_REF##*/}-aarch64-apple-darwin
          cp artifacts/xcframework-universal/bundle.zip dist/xcframework-universal-${GITHUB_REF##*/}.zip
          cp artifacts/xcframework-universal/bundle.zip.checksum dist/xcframework-universal-${GITHUB_REF##*/}.zip.checksum

      - name: Publish release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            dist/*
